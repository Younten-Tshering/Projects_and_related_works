
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat May 15 15:36:01 ICT 2021
//----------------------------------------------------

package src;

import java_cup.runtime.*;
import java.util.*;
import src.ConsoleOutput.OutputType;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat May 15 15:36:01 ICT 2021
  */
public class MyCUP extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MyCUP() {super();}

  /** Constructor which sets the default scanner. */
  public MyCUP(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MyCUP(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\061\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\004\000\002\003\003\000\002\004\005" +
    "\000\002\015\005\000\002\015\003\000\002\014\004\000" +
    "\002\014\003\000\002\005\004\000\002\005\003\000\002" +
    "\005\003\000\002\005\004\000\002\005\004\000\002\005" +
    "\005\000\002\010\010\000\002\010\012\000\002\011\007" +
    "\000\002\012\006\000\002\013\005\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\007\006\000\002\007\005\000\002\016\005\000\002\016" +
    "\005\000\002\016\003\000\002\016\003\000\002\020\005" +
    "\000\002\020\005\000\002\020\005\000\002\020\003\000" +
    "\002\021\005\000\002\021\005\000\002\021\005\000\002" +
    "\021\005\000\002\021\005\000\002\021\005\000\002\021" +
    "\005\000\002\021\005\000\002\017\005\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\141\000\026\026\006\027\016\030\026\031\015\032" +
    "\012\035\011\036\025\037\021\040\014\046\030\001\002" +
    "\000\026\026\ufffd\027\ufffd\030\ufffd\031\ufffd\032\ufffd\035" +
    "\ufffd\036\ufffd\037\ufffd\040\ufffd\046\ufffd\001\002\000\032" +
    "\002\ufff8\026\ufff8\027\ufff8\030\ufff8\031\ufff8\032\ufff8\035" +
    "\ufff8\036\ufff8\037\ufff8\040\ufff8\041\ufff8\046\ufff8\001\002" +
    "\000\004\046\uffec\001\002\000\004\011\143\001\002\000" +
    "\004\046\136\001\002\000\004\014\132\001\002\000\004" +
    "\014\122\001\002\000\004\002\121\001\002\000\026\026" +
    "\006\027\016\030\026\031\015\032\012\035\011\036\025" +
    "\037\021\040\014\046\030\001\002\000\004\046\uffea\001" +
    "\002\000\004\046\uffeb\001\002\000\004\011\116\001\002" +
    "\000\036\002\ufff6\026\ufff6\027\ufff6\030\ufff6\031\ufff6\032" +
    "\ufff6\033\ufff6\034\ufff6\035\ufff6\036\ufff6\037\ufff6\040\ufff6" +
    "\041\ufff6\046\ufff6\001\002\000\004\014\114\001\002\000" +
    "\036\002\ufff5\026\ufff5\027\ufff5\030\ufff5\031\ufff5\032\ufff5" +
    "\033\ufff5\034\ufff5\035\ufff5\036\ufff5\037\ufff5\040\ufff5\041" +
    "\ufff5\046\ufff5\001\002\000\026\026\006\027\016\030\026" +
    "\031\015\032\012\035\011\036\025\037\021\040\014\046" +
    "\030\001\002\000\004\011\111\001\002\000\004\014\106" +
    "\001\002\000\004\046\uffe9\001\002\000\030\002\uffff\026" +
    "\006\027\016\030\026\031\015\032\012\035\011\036\025" +
    "\037\021\040\014\046\030\001\002\000\004\013\031\001" +
    "\002\000\016\014\043\042\033\043\037\044\034\045\036" +
    "\046\035\001\002\000\040\004\uffdf\005\uffdf\006\uffdf\007" +
    "\uffdf\010\uffdf\011\uffdf\015\uffdf\016\067\017\066\020\061" +
    "\021\065\022\063\023\062\024\064\025\070\001\002\000" +
    "\040\004\uffd5\005\uffd5\006\uffd5\007\uffd5\010\uffd5\011\uffd5" +
    "\015\uffd5\016\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5\023" +
    "\uffd5\024\uffd5\025\uffd5\001\002\000\040\004\uffd3\005\uffd3" +
    "\006\uffd3\007\uffd3\010\uffd3\011\uffd3\015\uffd3\016\uffd3\017" +
    "\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3" +
    "\001\002\000\040\004\uffd2\005\uffd2\006\uffd2\007\uffd2\010" +
    "\uffd2\011\uffd2\015\uffd2\016\uffd2\017\uffd2\020\uffd2\021\uffd2" +
    "\022\uffd2\023\uffd2\024\uffd2\025\uffd2\001\002\000\040\004" +
    "\uffd1\005\uffd1\006\uffd1\007\uffd1\010\uffd1\011\uffd1\015\uffd1" +
    "\016\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1\024" +
    "\uffd1\025\uffd1\001\002\000\040\004\uffd4\005\uffd4\006\uffd4" +
    "\007\uffd4\010\uffd4\011\uffd4\015\uffd4\016\uffd4\017\uffd4\020" +
    "\uffd4\021\uffd4\022\uffd4\023\uffd4\024\uffd4\025\uffd4\001\002" +
    "\000\020\004\uffe4\005\uffe4\006\054\007\053\010\052\011" +
    "\uffe4\015\uffe4\001\002\000\012\004\uffe3\005\uffe3\011\uffe3" +
    "\015\uffe3\001\002\000\010\004\046\005\047\011\uffe7\001" +
    "\002\000\016\014\043\042\033\043\037\044\034\045\036" +
    "\046\035\001\002\000\010\004\046\005\047\015\045\001" +
    "\002\000\040\004\uffd6\005\uffd6\006\uffd6\007\uffd6\010\uffd6" +
    "\011\uffd6\015\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6\022" +
    "\uffd6\023\uffd6\024\uffd6\025\uffd6\001\002\000\016\014\043" +
    "\042\033\043\037\044\034\045\036\046\035\001\002\000" +
    "\016\014\043\042\033\043\037\044\034\045\036\046\035" +
    "\001\002\000\020\004\uffdf\005\uffdf\006\uffdf\007\uffdf\010" +
    "\uffdf\011\uffdf\015\uffdf\001\002\000\020\004\uffe5\005\uffe5" +
    "\006\054\007\053\010\052\011\uffe5\015\uffe5\001\002\000" +
    "\016\014\043\042\033\043\037\044\034\045\036\046\035" +
    "\001\002\000\016\014\043\042\033\043\037\044\034\045" +
    "\036\046\035\001\002\000\016\014\043\042\033\043\037" +
    "\044\034\045\036\046\035\001\002\000\020\004\uffe2\005" +
    "\uffe2\006\uffe2\007\uffe2\010\uffe2\011\uffe2\015\uffe2\001\002" +
    "\000\020\004\uffe1\005\uffe1\006\uffe1\007\uffe1\010\uffe1\011" +
    "\uffe1\015\uffe1\001\002\000\020\004\uffe0\005\uffe0\006\uffe0" +
    "\007\uffe0\010\uffe0\011\uffe0\015\uffe0\001\002\000\020\004" +
    "\uffe6\005\uffe6\006\054\007\053\010\052\011\uffe6\015\uffe6" +
    "\001\002\000\016\014\043\042\033\043\037\044\034\045" +
    "\036\046\035\001\002\000\016\014\043\042\033\043\037" +
    "\044\034\045\036\046\035\001\002\000\016\014\043\042" +
    "\033\043\037\044\034\045\036\046\035\001\002\000\016" +
    "\014\043\042\033\043\037\044\034\045\036\046\035\001" +
    "\002\000\016\014\043\042\033\043\037\044\034\045\036" +
    "\046\035\001\002\000\016\014\043\042\033\043\037\044" +
    "\034\045\036\046\035\001\002\000\016\014\043\042\033" +
    "\043\037\044\034\045\036\046\035\001\002\000\016\014" +
    "\043\042\033\043\037\044\034\045\036\046\035\001\002" +
    "\000\012\004\uffdd\005\uffdd\011\uffdd\015\uffdd\001\002\000" +
    "\012\004\uffd8\005\uffd8\011\uffd8\015\uffd8\001\002\000\012" +
    "\004\uffd7\005\uffd7\011\uffd7\015\uffd7\001\002\000\012\004" +
    "\uffdb\005\uffdb\011\uffdb\015\uffdb\001\002\000\012\004\uffde" +
    "\005\uffde\011\uffde\015\uffde\001\002\000\012\004\uffda\005" +
    "\uffda\011\uffda\015\uffda\001\002\000\012\004\uffd9\005\uffd9" +
    "\011\uffd9\015\uffd9\001\002\000\012\004\uffdc\005\uffdc\011" +
    "\uffdc\015\uffdc\001\002\000\032\002\ufff9\026\ufff9\027\ufff9" +
    "\030\ufff9\031\ufff9\032\ufff9\035\ufff9\036\ufff9\037\ufff9\040" +
    "\ufff9\041\ufff9\046\ufff9\001\002\000\004\046\103\001\002" +
    "\000\004\013\104\001\002\000\016\014\043\042\033\043" +
    "\037\044\034\045\036\046\035\001\002\000\010\004\046" +
    "\005\047\011\uffe8\001\002\000\016\014\043\042\033\043" +
    "\037\044\034\045\036\046\035\001\002\000\010\004\046" +
    "\005\047\015\110\001\002\000\004\011\uffee\001\002\000" +
    "\036\002\ufff7\026\ufff7\027\ufff7\030\ufff7\031\ufff7\032\ufff7" +
    "\033\ufff7\034\ufff7\035\ufff7\036\ufff7\037\ufff7\040\ufff7\041" +
    "\ufff7\046\ufff7\001\002\000\026\026\ufffe\027\ufffe\030\ufffe" +
    "\031\ufffe\032\ufffe\035\ufffe\036\ufffe\037\ufffe\040\ufffe\046" +
    "\ufffe\001\002\000\030\002\001\026\006\027\016\030\026" +
    "\031\015\032\012\035\011\036\025\037\021\040\014\046" +
    "\030\001\002\000\004\015\115\001\002\000\004\011\uffed" +
    "\001\002\000\036\002\ufff3\026\ufff3\027\ufff3\030\ufff3\031" +
    "\ufff3\032\ufff3\033\ufff3\034\ufff3\035\ufff3\036\ufff3\037\ufff3" +
    "\040\ufff3\041\ufff3\046\ufff3\001\002\000\030\026\006\027" +
    "\016\030\026\031\015\032\012\035\011\036\025\037\021" +
    "\040\014\041\120\046\030\001\002\000\036\002\ufff2\026" +
    "\ufff2\027\ufff2\030\ufff2\031\ufff2\032\ufff2\033\ufff2\034\ufff2" +
    "\035\ufff2\036\ufff2\037\ufff2\040\ufff2\041\ufff2\046\ufff2\001" +
    "\002\000\004\002\000\001\002\000\016\014\043\042\033" +
    "\043\037\044\034\045\036\046\035\001\002\000\010\004" +
    "\046\005\047\015\124\001\002\000\026\026\006\027\016" +
    "\030\026\031\015\032\012\035\011\036\025\037\021\040" +
    "\014\046\030\001\002\000\006\033\127\034\126\001\002" +
    "\000\026\026\006\027\016\030\026\031\015\032\012\035" +
    "\011\036\025\037\021\040\014\046\030\001\002\000\036" +
    "\002\ufff1\026\ufff1\027\ufff1\030\ufff1\031\ufff1\032\ufff1\033" +
    "\ufff1\034\ufff1\035\ufff1\036\ufff1\037\ufff1\040\ufff1\041\ufff1" +
    "\046\ufff1\001\002\000\004\033\131\001\002\000\036\002" +
    "\ufff0\026\ufff0\027\ufff0\030\ufff0\031\ufff0\032\ufff0\033\ufff0" +
    "\034\ufff0\035\ufff0\036\ufff0\037\ufff0\040\ufff0\041\ufff0\046" +
    "\ufff0\001\002\000\016\014\043\042\033\043\037\044\034" +
    "\045\036\046\035\001\002\000\010\004\046\005\047\015" +
    "\134\001\002\000\026\026\006\027\016\030\026\031\015" +
    "\032\012\035\011\036\025\037\021\040\014\046\030\001" +
    "\002\000\036\002\uffef\026\uffef\027\uffef\030\uffef\031\uffef" +
    "\032\uffef\033\uffef\034\uffef\035\uffef\036\uffef\037\uffef\040" +
    "\uffef\041\uffef\046\uffef\001\002\000\010\011\ufffa\012\ufffa" +
    "\013\104\001\002\000\006\011\141\012\140\001\002\000" +
    "\004\046\142\001\002\000\026\026\ufffc\027\ufffc\030\ufffc" +
    "\031\ufffc\032\ufffc\035\ufffc\036\ufffc\037\ufffc\040\ufffc\046" +
    "\ufffc\001\002\000\006\011\ufffb\012\ufffb\001\002\000\036" +
    "\002\ufff4\026\ufff4\027\ufff4\030\ufff4\031\ufff4\032\ufff4\033" +
    "\ufff4\034\ufff4\035\ufff4\036\ufff4\037\ufff4\040\ufff4\041\ufff4" +
    "\046\ufff4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\141\000\030\002\012\003\022\004\003\005\004\006" +
    "\007\007\023\010\017\011\021\012\006\013\016\014\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\136\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\005" +
    "\004\006\101\007\023\010\017\011\021\012\006\013\016" +
    "\014\116\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\004\111\005\004\006\007\007\023\010" +
    "\017\011\021\012\006\013\016\014\112\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\005" +
    "\100\006\101\007\023\010\017\011\021\012\006\013\016" +
    "\001\001\000\002\001\001\000\012\016\041\017\031\020" +
    "\037\021\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\016\043\017\031\020\037\021\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\017\047" +
    "\020\057\001\001\000\006\017\047\020\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\056\001\001" +
    "\000\004\017\055\001\001\000\004\017\054\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\077\001\001\000\004\017\076\001" +
    "\001\000\004\017\075\001\001\000\004\017\074\001\001" +
    "\000\004\017\073\001\001\000\004\017\072\001\001\000" +
    "\004\017\071\001\001\000\004\017\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\016\104\017\031\020\037\021\040" +
    "\001\001\000\002\001\001\000\012\016\106\017\031\020" +
    "\037\021\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\005\100\006" +
    "\101\007\023\010\017\011\021\012\006\013\016\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\005\100\006\101\007\023\010\017\011\021\012\006" +
    "\013\016\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\016\122\017\031\020\037\021\040\001\001\000\002" +
    "\001\001\000\020\005\124\006\101\007\023\010\017\011" +
    "\021\012\006\013\016\001\001\000\002\001\001\000\020" +
    "\005\127\006\101\007\023\010\017\011\021\012\006\013" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\016\132\017\031\020\037\021\040\001" +
    "\001\000\002\001\001\000\020\005\134\006\101\007\023" +
    "\010\017\011\021\012\006\013\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MyCUP$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MyCUP$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MyCUP$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    public void report_error(String message, Object info)
    {
    System.out.println("REPORT ERROR CALLED");
    StringBuffer m = new StringBuffer("Error");
   
    if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));   
                if (s.right >= 0)                    
                    m.append(", column "+(s.right+1));
            }
        }
   
        m.append(" : "+message);
        System.err.println(m);
        ConsoleOutput.getInstance().setText(m.toString(), OutputType.ERROR);
    }

    public void sem_error(String context , String message)
    {
        System.out.println("SEM ERROR CALLED");
     	System.err.println("Semantic Error:"+ "<"+context+">" + message);
        ConsoleOutput.getInstance().setText("Semantic Error:"+ "<"+context+">" + message, OutputType.ERROR);
    }

    public void type_error (String context,String message)
    {
        System.out.println("TYPE ERROR CALLED");
        System.err.println("Type Error:"+ "<"+context+">" + message);
        ConsoleOutput.getInstance().setText("Type Error:"+ "<"+context+">" + message, OutputType.ERROR);
    }

    public void report_fatal_error(String message, Object info)
    {
        System.out.println("FATAL ERROR CALLED");
        report_error(message, info);
        ConsoleOutput.getInstance().setText("Syntax Error: " + message, OutputType.ERROR);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MyCUP$actions {
  private final MyCUP parser;

  /** Constructor */
  CUP$MyCUP$actions(MyCUP parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MyCUP$do_action(
    int                        CUP$MyCUP$act_num,
    java_cup.runtime.lr_parser CUP$MyCUP$parser,
    java.util.Stack            CUP$MyCUP$stack,
    int                        CUP$MyCUP$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MyCUP$result;

      /* select the action based on the action number */
      switch (CUP$MyCUP$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // term ::= BOL 
            {
              Aexp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$MyCUP$stack.peek()).value;
		 RESULT = new Aexp(b); 
              CUP$MyCUP$result = parser.getSymbolFactory().newSymbol("term",13, ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()), RESULT);
            }
          return CUP$MyCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // term ::= VAR 
            {
              Aexp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$MyCUP$stack.peek()).value;
		 RESULT = new Aexp(v); 
              CUP$MyCUP$result = parser.getSymbolFactory().newSymbol("term",13, ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()), RESULT);
            }
          return CUP$MyCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // term ::= STRING_LITERAL 
            {
              Aexp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$MyCUP$stack.peek()).value;
		 RESULT = new Aexp(s, s); 
              CUP$MyCUP$result = parser.getSymbolFactory().newSymbol("term",13, ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()), RESULT);
            }
          return CUP$MyCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // term ::= FLOAT_LITERAL 
            {
              Aexp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()).right;
		Float f = (Float)((java_cup.runtime.Symbol) CUP$MyCUP$stack.peek()).value;
		 RESULT = new Aexp(f); 
              CUP$MyCUP$result = parser.getSymbolFactory().newSymbol("term",13, ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()), RESULT);
            }
          return CUP$MyCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // term ::= INT_LITERAL 
            {
              Aexp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$MyCUP$stack.peek()).value;
		 RESULT = new Aexp(i); 
              CUP$MyCUP$result = parser.getSymbolFactory().newSymbol("term",13, ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()), RESULT);
            }
          return CUP$MyCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // term ::= LPAREN expr RPAREN 
            {
              Aexp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-1)).right;
		Aexp e = (Aexp)((java_cup.runtime.Symbol) CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-1)).value;
		 RESULT = e; 
              CUP$MyCUP$result = parser.getSymbolFactory().newSymbol("term",13, ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-2)), ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()), RESULT);
            }
          return CUP$MyCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // relop ::= term NET term 
            {
              Aexp RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-2)).right;
		Aexp t1 = (Aexp)((java_cup.runtime.Symbol) CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()).right;
		Aexp t2 = (Aexp)((java_cup.runtime.Symbol) CUP$MyCUP$stack.peek()).value;
		 RESULT = new Aexp(new Args(t1, t2), sym.NET); 
              CUP$MyCUP$result = parser.getSymbolFactory().newSymbol("relop",15, ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-2)), ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()), RESULT);
            }
          return CUP$MyCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // relop ::= term ET term 
            {
              Aexp RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-2)).right;
		Aexp t1 = (Aexp)((java_cup.runtime.Symbol) CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()).right;
		Aexp t2 = (Aexp)((java_cup.runtime.Symbol) CUP$MyCUP$stack.peek()).value;
		 RESULT = new Aexp(new Args(t1, t2), sym.ET); 
              CUP$MyCUP$result = parser.getSymbolFactory().newSymbol("relop",15, ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-2)), ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()), RESULT);
            }
          return CUP$MyCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // relop ::= term GTE term 
            {
              Aexp RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-2)).right;
		Aexp t1 = (Aexp)((java_cup.runtime.Symbol) CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()).right;
		Aexp t2 = (Aexp)((java_cup.runtime.Symbol) CUP$MyCUP$stack.peek()).value;
		 RESULT = new Aexp(new Args(t1, t2), sym.GTE); 
              CUP$MyCUP$result = parser.getSymbolFactory().newSymbol("relop",15, ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-2)), ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()), RESULT);
            }
          return CUP$MyCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // relop ::= term GT term 
            {
              Aexp RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-2)).right;
		Aexp t1 = (Aexp)((java_cup.runtime.Symbol) CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()).right;
		Aexp t2 = (Aexp)((java_cup.runtime.Symbol) CUP$MyCUP$stack.peek()).value;
		 RESULT = new Aexp(new Args(t1, t2), sym.GT); 
              CUP$MyCUP$result = parser.getSymbolFactory().newSymbol("relop",15, ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-2)), ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()), RESULT);
            }
          return CUP$MyCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // relop ::= term LTE term 
            {
              Aexp RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-2)).right;
		Aexp t1 = (Aexp)((java_cup.runtime.Symbol) CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()).right;
		Aexp t2 = (Aexp)((java_cup.runtime.Symbol) CUP$MyCUP$stack.peek()).value;
		 RESULT = new Aexp(new Args(t1, t2), sym.LTE); 
              CUP$MyCUP$result = parser.getSymbolFactory().newSymbol("relop",15, ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-2)), ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()), RESULT);
            }
          return CUP$MyCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // relop ::= term LT term 
            {
              Aexp RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-2)).right;
		Aexp t1 = (Aexp)((java_cup.runtime.Symbol) CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()).right;
		Aexp t2 = (Aexp)((java_cup.runtime.Symbol) CUP$MyCUP$stack.peek()).value;
		 RESULT = new Aexp(new Args(t1, t2), sym.LT); 
              CUP$MyCUP$result = parser.getSymbolFactory().newSymbol("relop",15, ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-2)), ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()), RESULT);
            }
          return CUP$MyCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // relop ::= term OR term 
            {
              Aexp RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-2)).right;
		Aexp t1 = (Aexp)((java_cup.runtime.Symbol) CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()).right;
		Aexp t2 = (Aexp)((java_cup.runtime.Symbol) CUP$MyCUP$stack.peek()).value;
		 RESULT = new Aexp(new Args(t1, t2), sym.OR); 
              CUP$MyCUP$result = parser.getSymbolFactory().newSymbol("relop",15, ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-2)), ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()), RESULT);
            }
          return CUP$MyCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // relop ::= term AND term 
            {
              Aexp RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-2)).right;
		Aexp t1 = (Aexp)((java_cup.runtime.Symbol) CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()).right;
		Aexp t2 = (Aexp)((java_cup.runtime.Symbol) CUP$MyCUP$stack.peek()).value;
		 RESULT = new Aexp(new Args(t1, t2), sym.AND); 
              CUP$MyCUP$result = parser.getSymbolFactory().newSymbol("relop",15, ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-2)), ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()), RESULT);
            }
          return CUP$MyCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // factor ::= term 
            {
              Aexp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()).right;
		Aexp t = (Aexp)((java_cup.runtime.Symbol) CUP$MyCUP$stack.peek()).value;
		 RESULT = t; 
              CUP$MyCUP$result = parser.getSymbolFactory().newSymbol("factor",14, ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()), RESULT);
            }
          return CUP$MyCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // factor ::= factor MOD term 
            {
              Aexp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-2)).right;
		Aexp f = (Aexp)((java_cup.runtime.Symbol) CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()).right;
		Aexp t = (Aexp)((java_cup.runtime.Symbol) CUP$MyCUP$stack.peek()).value;
		 RESULT = new Aexp(new Args(f, t), sym.MOD); 
              CUP$MyCUP$result = parser.getSymbolFactory().newSymbol("factor",14, ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-2)), ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()), RESULT);
            }
          return CUP$MyCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // factor ::= factor DIVIDE term 
            {
              Aexp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-2)).right;
		Aexp f = (Aexp)((java_cup.runtime.Symbol) CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()).right;
		Aexp t = (Aexp)((java_cup.runtime.Symbol) CUP$MyCUP$stack.peek()).value;
		 RESULT = new Aexp(new Args(f, t), sym.DIVIDE); 
              CUP$MyCUP$result = parser.getSymbolFactory().newSymbol("factor",14, ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-2)), ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()), RESULT);
            }
          return CUP$MyCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // factor ::= factor TIMES term 
            {
              Aexp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-2)).right;
		Aexp f = (Aexp)((java_cup.runtime.Symbol) CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()).right;
		Aexp t = (Aexp)((java_cup.runtime.Symbol) CUP$MyCUP$stack.peek()).value;
		 RESULT = new Aexp(new Args(f, t), sym.TIMES); 
              CUP$MyCUP$result = parser.getSymbolFactory().newSymbol("factor",14, ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-2)), ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()), RESULT);
            }
          return CUP$MyCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= relop 
            {
              Aexp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()).right;
		Aexp r = (Aexp)((java_cup.runtime.Symbol) CUP$MyCUP$stack.peek()).value;
		 RESULT = r; 
              CUP$MyCUP$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()), RESULT);
            }
          return CUP$MyCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= factor 
            {
              Aexp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()).right;
		Aexp f = (Aexp)((java_cup.runtime.Symbol) CUP$MyCUP$stack.peek()).value;
		 RESULT = f; 
              CUP$MyCUP$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()), RESULT);
            }
          return CUP$MyCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= expr MINUS factor 
            {
              Aexp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-2)).right;
		Aexp e = (Aexp)((java_cup.runtime.Symbol) CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()).right;
		Aexp f = (Aexp)((java_cup.runtime.Symbol) CUP$MyCUP$stack.peek()).value;
		 RESULT = new Aexp(new Args(e, f), sym.MINUS); 
              CUP$MyCUP$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-2)), ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()), RESULT);
            }
          return CUP$MyCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= expr PLUS factor 
            {
              Aexp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-2)).right;
		Aexp e = (Aexp)((java_cup.runtime.Symbol) CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()).right;
		Aexp f = (Aexp)((java_cup.runtime.Symbol) CUP$MyCUP$stack.peek()).value;
		 RESULT = new Aexp(new Args(e, f), sym.PLUS); 
              CUP$MyCUP$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-2)), ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()), RESULT);
            }
          return CUP$MyCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // assignment ::= VAR EQUALS expr 
            {
              Statement RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()).right;
		Aexp e = (Aexp)((java_cup.runtime.Symbol) CUP$MyCUP$stack.peek()).value;
		 
                    if (!Environment.table.containsKey(v)) {
                        parser.sem_error(v, "Variable undeclared");
                    } else {
                        if (Type.equals(Environment.table.get(v).getType(), e.getType())) {
                            RESULT = Statement.assignment(v, e);
                        } else {
                            parser.type_error("e", " : expression in the assignment statement must have the type " + Environment.table.get(v).getType().getTypeName());
                        }
                    }
                
              CUP$MyCUP$result = parser.getSymbolFactory().newSymbol("assignment",5, ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-2)), ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()), RESULT);
            }
          return CUP$MyCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // assignment ::= type VAR EQUALS expr 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()).right;
		Aexp e = (Aexp)((java_cup.runtime.Symbol) CUP$MyCUP$stack.peek()).value;
		 
                if(Environment.table.containsKey(v)) { 
                    Environment.printEnvTable();
                    parser.sem_error(v,"Duplicate declaration");
                } else {
                        if (t.isInteger())
                        {
                            Environment.table.put(v,new TypeValue(0));
                        }
                        if (t.isString())
                        {                           
                            Environment.table.put(v,new TypeValue(""));                             
                        }
                        if (t.isFloating_point())
                        {                            
                            Environment.table.put(v,new TypeValue(0.0f));
                        }
                        if (t.isBool())
                        {
                            Environment.table.put(v,new TypeValue(false));
                        }

                        if (Type.equals(Environment.table.get(v).getType(), e.getType())) {
                            RESULT = Statement.assignment(v, e);
                        } else {
                            parser.type_error("e", " : expression in the assignment statement must have the type " + Environment.table.get(v).getType().getTypeName());
                        }

                        //RESULT = Statement.assignment(t, v, e);
                    }
                
              CUP$MyCUP$result = parser.getSymbolFactory().newSymbol("assignment",5, ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-3)), ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()), RESULT);
            }
          return CUP$MyCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // type ::= BOOL 
            {
              Type RESULT =null;
		 RESULT = new Type().bool(); 
              CUP$MyCUP$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()), RESULT);
            }
          return CUP$MyCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // type ::= STRING 
            {
              Type RESULT =null;
		 RESULT = new Type().string(); 
              CUP$MyCUP$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()), RESULT);
            }
          return CUP$MyCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // type ::= FLOAT 
            {
              Type RESULT =null;
		 RESULT = new Type().floating_point(); 
              CUP$MyCUP$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()), RESULT);
            }
          return CUP$MyCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // type ::= INT 
            {
              Type RESULT =null;
		 RESULT = new Type().integer(); 
              CUP$MyCUP$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()), RESULT);
            }
          return CUP$MyCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // println ::= PRINTLN LPAREN RPAREN 
            {
              Statement RESULT =null;
		
                    RESULT = Statement.println();
                
              CUP$MyCUP$result = parser.getSymbolFactory().newSymbol("println",9, ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-2)), ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()), RESULT);
            }
          return CUP$MyCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // print ::= PRINT LPAREN expr RPAREN 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-1)).right;
		Aexp e = (Aexp)((java_cup.runtime.Symbol) CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-1)).value;
		 
                    RESULT = Statement.print(e);
                
              CUP$MyCUP$result = parser.getSymbolFactory().newSymbol("print",8, ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-3)), ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()), RESULT);
            }
          return CUP$MyCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // while ::= WHILE LPAREN expr RPAREN statement 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-2)).right;
		Aexp e = (Aexp)((java_cup.runtime.Symbol) CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$MyCUP$stack.peek()).value;
		 
                if((Boolean)e.getType().isBool()) {
                        RESULT = Statement.whileloop(e,s);
                    } else {
                        parser.type_error("e", " : expression in the if condition must be a boolean.");
                    }
                
              CUP$MyCUP$result = parser.getSymbolFactory().newSymbol("while",7, ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-4)), ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()), RESULT);
            }
          return CUP$MyCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ifelse ::= IF LPAREN expr RPAREN statement ELSE statement ENDIF 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-5)).right;
		Aexp e = (Aexp)((java_cup.runtime.Symbol) CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-5)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-3)).right;
		Statement s1 = (Statement)((java_cup.runtime.Symbol) CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-1)).right;
		Statement s2 = (Statement)((java_cup.runtime.Symbol) CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-1)).value;
		 
                    if((Boolean)e.getType().isBool()) {
                        RESULT = Statement.ifthenelse(e,s1,s2);
                    } else {
                        parser.type_error("e", " : expression in the if condition must be a boolean.");
                    }
                
              CUP$MyCUP$result = parser.getSymbolFactory().newSymbol("ifelse",6, ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-7)), ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()), RESULT);
            }
          return CUP$MyCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ifelse ::= IF LPAREN expr RPAREN statement ENDIF 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-3)).right;
		Aexp e = (Aexp)((java_cup.runtime.Symbol) CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-1)).value;
		 
                    if((Boolean)e.getType().isBool()) {
                        RESULT = Statement.ifthen(e,s);
                    } else {
                        parser.type_error("e", " : expression in the if condition must be a boolean.");
                    }
                
              CUP$MyCUP$result = parser.getSymbolFactory().newSymbol("ifelse",6, ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-5)), ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()), RESULT);
            }
          return CUP$MyCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // statement ::= BEGIN statements END 
            {
              Statement RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-1)).right;
		Statements ss = (Statements)((java_cup.runtime.Symbol) CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-1)).value;
		 RESULT = Statement.list(ss); 
              CUP$MyCUP$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-2)), ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()), RESULT);
            }
          return CUP$MyCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // statement ::= println SEMI 
            {
              Statement RESULT =null;
		int prtlnleft = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-1)).left;
		int prtlnright = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-1)).right;
		Statement prtln = (Statement)((java_cup.runtime.Symbol) CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-1)).value;
		 RESULT = prtln; 
              CUP$MyCUP$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-1)), ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()), RESULT);
            }
          return CUP$MyCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // statement ::= print SEMI 
            {
              Statement RESULT =null;
		int prtleft = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-1)).left;
		int prtright = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-1)).right;
		Statement prt = (Statement)((java_cup.runtime.Symbol) CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-1)).value;
		 RESULT = prt; 
              CUP$MyCUP$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-1)), ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()), RESULT);
            }
          return CUP$MyCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // statement ::= while 
            {
              Statement RESULT =null;
		int whleft = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()).left;
		int whright = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()).right;
		Statement wh = (Statement)((java_cup.runtime.Symbol) CUP$MyCUP$stack.peek()).value;
		 RESULT = wh; 
              CUP$MyCUP$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()), RESULT);
            }
          return CUP$MyCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // statement ::= ifelse 
            {
              Statement RESULT =null;
		int ieleft = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()).left;
		int ieright = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()).right;
		Statement ie = (Statement)((java_cup.runtime.Symbol) CUP$MyCUP$stack.peek()).value;
		 RESULT = ie; 
              CUP$MyCUP$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()), RESULT);
            }
          return CUP$MyCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // statement ::= assignment SEMI 
            {
              Statement RESULT =null;
		int assleft = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-1)).left;
		int assright = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-1)).right;
		Statement ass = (Statement)((java_cup.runtime.Symbol) CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-1)).value;
		 
                    RESULT = ass;
                
              CUP$MyCUP$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-1)), ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()), RESULT);
            }
          return CUP$MyCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statements ::= statement 
            {
              Statements RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$MyCUP$stack.peek()).value;
		 RESULT = new Statements(s); 
              CUP$MyCUP$result = parser.getSymbolFactory().newSymbol("statements",10, ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()), RESULT);
            }
          return CUP$MyCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statements ::= statements statement 
            {
              Statements RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-1)).right;
		Statements ss = (Statements)((java_cup.runtime.Symbol) CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$MyCUP$stack.peek()).value;
		 RESULT = new Statements(ss, s); 
              CUP$MyCUP$result = parser.getSymbolFactory().newSymbol("statements",10, ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-1)), ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()), RESULT);
            }
          return CUP$MyCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // variables ::= VAR 
            {
              ArrayList<String> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$MyCUP$stack.peek()).value;
		
                    Variables.list.add(v);
                    RESULT = Variables.list;
                
              CUP$MyCUP$result = parser.getSymbolFactory().newSymbol("variables",11, ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()), RESULT);
            }
          return CUP$MyCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // variables ::= variables COMMA VAR 
            {
              ArrayList<String> RESULT =null;
		int vvleft = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-2)).left;
		int vvright = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-2)).right;
		ArrayList<String> vv = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$MyCUP$stack.peek()).value;
		
                    vv.add(v);
                    RESULT = vv;
                 
              CUP$MyCUP$result = parser.getSymbolFactory().newSymbol("variables",11, ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-2)), ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()), RESULT);
            }
          return CUP$MyCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaration ::= type variables SEMI 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-2)).value;
		int vvleft = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-1)).left;
		int vvright = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-1)).right;
		ArrayList<String> vv = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-1)).value;
		
                    for(String v: vv) {
                        if(Environment.table.containsKey(v)) {
                            System.out.println("Duplicate Declaration");
                            parser.sem_error(v, "Duplicate Declaration "+v);
                        } else {
                            TypeValue tv = new TypeValue();
                            if (t.isInteger()) {
                                tv = new TypeValue(0);
                            }
                            if (t.isFloating_point()) {
                                tv = new TypeValue(0.0f);
                            }
                            if (t.isString()) {
                                tv = new TypeValue("");
                            }
                            if (t.isBool()) {
                                tv = new TypeValue(false);
                            }
                            Environment.table.put(v, tv);

                            RESULT = Statement.assignment(t, v);
    
                        }
                    }
                    vv.clear();
                
              CUP$MyCUP$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-2)), ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()), RESULT);
            }
          return CUP$MyCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declarations ::= declaration 
            {
              Statement RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()).right;
		Statement d = (Statement)((java_cup.runtime.Symbol) CUP$MyCUP$stack.peek()).value;
		 
              CUP$MyCUP$result = parser.getSymbolFactory().newSymbol("declarations",1, ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()), RESULT);
            }
          return CUP$MyCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declarations ::= declarations declaration 
            {
              Statement RESULT =null;
		int ddleft = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-1)).left;
		int ddright = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-1)).right;
		Statement dd = (Statement)((java_cup.runtime.Symbol) CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()).right;
		Statement d = (Statement)((java_cup.runtime.Symbol) CUP$MyCUP$stack.peek()).value;
		 
              CUP$MyCUP$result = parser.getSymbolFactory().newSymbol("declarations",1, ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-1)), ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()), RESULT);
            }
          return CUP$MyCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= statements 
            {
              Object RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()).right;
		Statements ss = (Statements)((java_cup.runtime.Symbol) CUP$MyCUP$stack.peek()).value;
		 ss.execute(); 
              CUP$MyCUP$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()), RESULT);
            }
          return CUP$MyCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-1)).value;
		RESULT = start_val;
              CUP$MyCUP$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-1)), ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MyCUP$parser.done_parsing();
          return CUP$MyCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= declarations statements 
            {
              Object RESULT =null;
		int ddleft = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-1)).left;
		int ddright = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-1)).right;
		Statement dd = (Statement)((java_cup.runtime.Symbol) CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-1)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()).right;
		Statements ss = (Statements)((java_cup.runtime.Symbol) CUP$MyCUP$stack.peek()).value;
		 ss.execute(); 
              CUP$MyCUP$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$MyCUP$stack.elementAt(CUP$MyCUP$top-1)), ((java_cup.runtime.Symbol)CUP$MyCUP$stack.peek()), RESULT);
            }
          return CUP$MyCUP$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

